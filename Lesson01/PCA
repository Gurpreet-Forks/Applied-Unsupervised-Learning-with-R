#PCA in R



#First, load some data
library(MASS)
str(Boston)


#Get a covariance matrix
covMtx = cov(Boston)
covMtx

#Get the eigenvectors of the covariance matrix
eigen = eigen(covMtx)
eigen


#Transform data using PCS
newData = as.matrix(Boston) %*% as.matrix(eigen$vectors)
newData2 = as.matrix(Boston) %*% as.matrix(eigen$vectors[,1:2])

restoreddata<-as.matrix(newData2) %*% as.matrix(eigen$vectors[1:2,])
diff<-Boston-restoreddata

cov(newData)                                                     

#Plotting the newest data
plot(newData[,2] ~ newData[,3], xlim = c(min(newData[,3]),max(newData[,3])), ylim = c(min(newData[,2]), max(newData[,2])))  # should be align over one of the axes

plot(newData[,1] ~ newData[,2], xlim = c(min(newData[,2]),max(newData[,2])), ylim = c(min(newData[,1]), max(newData[,1])))  # should be align over one of the axes


#Transforming, then restoring the data
transformed<-t(as.matrix(eigen$vectors)) %*% t(as.matrix(Boston))

restored<-t(t(t(as.matrix(eigen$vectors))) %*% as.matrix(transformed))


######Changing the number of eigenvectors used
neigen<-1
transformed<-t(as.matrix(eigen$vectors[,1:neigen])) %*% t(as.matrix(Boston))

restored<- t(as.matrix(eigen$vectors[,1:neigen]) %*% as.matrix(transformed))

print(mean(abs(Boston[,14]-restored[,14])))


#Now, doing PCA with images
#More resources are available at
#https://alstatr.blogspot.com/2014/12/principal-component-analysis-on-imaging.html
#http://www.aaronschlegel.com/image-compression-principal-component-analysis/

cat <- readJPEG('/home/bradfordtuckfield/Documents/packt/building.jpg')

r <- cat[,,1]
g <- cat[,,2]
b <- cat[,,3]

cat.r.pca <- prcomp(r, center = FALSE)
cat.g.pca <- prcomp(g, center = FALSE)
cat.b.pca <- prcomp(b, center = FALSE)

rgb.pca <- list(cat.r.pca, cat.g.pca, cat.b.pca)


for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
  pca.img <- sapply(rgb.pca, function(j) {
    compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
  }, simplify = 'array')
  writeJPEG(pca.img, paste('/home/bradfordtuckfield/Documents/packt/compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}

original <- file.info('/home/bradfordtuckfield/Documents/packt/building.jpg')$size / 1000
imgs <- dir('/home/bradfordtuckfield/Documents/packt/compressed/')

for (i in imgs) {
  full.path <- paste('/home/bradfordtuckfield/Documents/packt/compressed/', i, sep='')
  print(paste(i, ' size: ', file.info(full.path)$size / 1000, ' original: ', original, ' % diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}


#Doing the same thing with the wine data
setwd('/home/bradfordtuckfield/Documents/packt/')

wine<-read.csv('wine.csv')

pairs(wine)

png('wineline.png')
plot(wine$flavanoid,wine$phenol)
abline(a=1.1954,b=.54171,col='red',lwd=5)
dev.off()

model<-lm(wine$phenol~wine$flavanoid)




###linear algebra

matrix1<-matrix(c(1,2,3,4,5,6),nrow=2)

matrix1[1,2]


#variance

var(wine$alcohol)

var(wine$magnesium)

#covariance

cov(wine$alcohol,wine$magnesium)


#covariance matrices
#more information at
#https://stats.seandolinar.com/making-a-covariance-matrix-in-r/
winecov<-cov(wine[,2:14])

#eigenvectors
#interesting resources: https://math.stackexchange.com/questions/23596/why-is-the-eigenvector-of-a-covariance-matrix-equal-to-a-principal-component
#http://www.visiondummy.com/2014/04/geometric-interpretation-covariance-matrix/

wine_attributes<-wine[,2:14]

wine_cov<-cov(wine_attributes)

wine_eigen<-eigen(wine_cov)


#transformation
neigen<-1
transformed<-t(as.matrix(wine_eigen$vectors[,1:neigen])) %*% t(as.matrix(wine_attributes))

restored<- t(as.matrix(wine_eigen$vectors[,1:neigen]) %*% as.matrix(transformed))

print(mean(abs(wine_attributes[,13]-restored[,13])))

