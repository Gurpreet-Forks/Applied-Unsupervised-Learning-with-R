
#market basket analysis

#one scenario:
#you own a grocery store
#you want to know where to place everything

#how do you answer that question?

#optimize for convenience: if people eat things together, then they will buy them together, so we should place them together

#optimize for impulse purchases: small things by cashiers where people wait

#optimize for inconvenience
#put the milk at the back of the store
#optimize for product exposure

#three ways to optimize
#how do we decide which way to optimize?

#experiment. maximize revenues or profits

#remember: gains might be short term
#if we maximize for inconvenience, we could get short term gains
#but long term losses
#reputation effects


#get some shopping data
#get RULES

#potential rule: when people buy peanut butter, they also buy jelly
#potential rule: when people buy pb and j, they also buy bread

#peanut butter/jelly sandwiches

#transaction 1: peanut butter, jelly, bread
#transaction 2: peanut butter, eggs, milk
#transaction 3: peanut butter, jelly, beef
#transaction 4: peanut butter, jelly, bread, apples

#if you have thousands of products and millions of transactions,
#it's infeasible to check every rule

#your goal is to find a rule like the following:
#every time people buy peanut butter and jelly, they also buy bread

#why this is useful: 
#reason 1: product placement: know what people buy together, to place them optimally
#reason 2: advertising: increase sales of something because you know who to target


#support: total fraction of the all transactions represented by the chosen basket

#confidence: support of total divided by support of antecedent
#confidence is sort of like Pr(B|A)

#lift is the confidence of the rule divided by the support of the consequent



#As an example, suppose the item set K = { peanut butter, jelly, bread } and consider the rule { peanut butter, jelly } ⇒ { bread }. A support value of 0.03 for this rule means that peanut butter , jelly , and bread appeared together in 3% of the market baskets. A confidence of 0.82 for this rule implies that when peanut butter and jelly were purchased, 82% of the time bread was also purchased. If bread appeared in 43% of all market baskets then the rule { peanut butter, jelly } ⇒ { bread } would have a lift of 1.95.


#apriori algorithm
#1. take all single-item sets that match the support threshold
#2. considering those sets, find two-item sets that match the support threshold
#considering these, find three-item sets that match the threshold
#and so on


#marketing data from https://web.stanford.edu/~hastie/ElemStatLearn/
mkt<-read.csv('/home/bradfordtuckfield/Documents/viax/marketing.txt',stringsAsFactors=FALSE,header=FALSE,sep=' ')



#manual way to create dummy variables
mkt$low_income<-1*(mkt$V1<=5)
mkt$high_income<-1*(mkt$V1>5)

mkt$male<-1*(mkt$V2==1)
mkt$female<-1*(mkt$V2==2)

mkt$married<-1*(mkt$V3==1)
mkt$livingtogether<-1*(mkt$V3==2)
mkt$divorced<-1*(mkt$V3==3)
mkt$widowed<-1*(mkt$V3==4)
mkt$single<-1*(mkt$V3==5)

mkt$young<-1*(mkt$V4<=3)
mkt$old<-1*(mkt$V4>3)

mkt$low_edu<-1*(mkt$V5<=3)
mkt$high_edu<-1*(mkt$V5>3)

mkt$managerial<-1*(mkt$V6==1)
mkt$sales<-1*(mkt$V6==2)
mkt$laborer<-1*(mkt$V6==3)
mkt$clerical<-1*(mkt$V6==4)
mkt$homemaker<-1*(mkt$V6==5)
mkt$student<-1*(mkt$V6==6)
mkt$military<-1*(mkt$V6==7)
mkt$retired<-1*(mkt$V6==8)
mkt$unemployed<-1*(mkt$V6==9)

mkt$newtoarea<-1*(mkt$V7<=2)
mkt$longinarea<-1*(mkt$V7>2)

mkt$notmarried<-1*(mkt$V8==1)
mkt$dualincome<-1*(mkt$V8==2)
mkt$singleincome<-1*(mkt$V8==3)

mkt$smallhousehold<-1*(mkt$V9<=4)
mkt$largehousehold<-1*(mkt$V9>4)

mkt$oldhousehold<-1*(mkt$V10<=4)
mkt$younghousehold<-1*(mkt$V10>4)

mkt$own<-1*(mkt$V11==1)
mkt$rent<-1*(mkt$V11==2)
mkt$parents<-1*(mkt$V11==3)

mkt$house<-1*(mkt$V12==1)
mkt$condo<-1*(mkt$V12==2)
mkt$apartment<-1*(mkt$V12==3)
mkt$mobilehome<-1*(mkt$V12==4)
mkt$otherhome<-1*(mkt$V12==5)

mkt$amerindian<-1*(mkt$V13==1)
mkt$asian<-1*(mkt$V13==2)
mkt$black<-1*(mkt$V13==3)
mkt$eastindian<-1*(mkt$V13==4)
mkt$hispanic<-1*(mkt$V13==5)
mkt$pacificislander<-1*(mkt$V13==6)
mkt$white<-1*(mkt$V13==7)
mkt$otherethnic<-1*(mkt$V13==8)

mkt$english<-1*(mkt$V14==1)
mkt$spanish<-1*(mkt$V14==2)
mkt$otherlanguage<-1*(mkt$V14==3)

mktdummies<-mkt[,15:ncol(mkt)]

#example: set 10% support threshold
support_thresh<-0.1

#first, get the mean of every variable
print(colMeans(mktdummies,na.rm=TRUE))

#first rule
firstpass<-unname(which(colMeans(mktdummies,na.rm=TRUE)>support_thresh))

#firstpass<-which(colMeans(mktdummies,na.rm=TRUE)>support_thresh)

print(firstpass)

#possibilities for second pass
secondcand<-t(combn(firstpass,2))
secondpass<-NULL

k<-1
while(k<=nrow(secondcand)){
support<-mean(mktdummies[,secondcand[k,1]]*mktdummies[,secondcand[k,2]],na.rm=TRUE)

if(support>support_thresh){
secondpass<-rbind(secondpass,secondcand[k,])
}

k<-k+1
}

#three-product baskets
thirdpass<-NULL
k<-1
while(k<=nrow(secondpass)){
j<-1
while(j<=length(firstpass)){
n<-1
product<-1
while(n<=ncol(secondpass)){
product<-product*mktdummies[,secondpass[k,n]]
n<-n+1
}
if(!(firstpass[j] %in% secondpass[k,])){
product<-product*mktdummies[,firstpass[j]]
support<-mean(product,na.rm=TRUE)
if(support>support_thresh){
thirdpass<-rbind(thirdpass,c(secondpass[k,],firstpass[j]))
}
}
j<-j+1
}
k<-k+1
}


fourthpass<-NULL
k<-1
while(k<=nrow(thirdpass)){
j<-1
while(j<=length(firstpass)){
n<-1
product<-1
while(n<=ncol(thirdpass)){
product<-product*mktdummies[,thirdpass[k,n]]
n<-n+1
}
if(!(firstpass[j] %in% thirdpass[k,])){
product<-product*mktdummies[,firstpass[j]]
support<-mean(product,na.rm=TRUE)
if(support>support_thresh){
fourthpass<-rbind(fourthpass,c(thirdpass[k,],firstpass[j]))
}
}
j<-j+1
}
k<-k+1
}


#why would we do this for something other than grocery baskets
#a few reasons:

#1. advertising based on these things
#2. deciding target demographics
#3. deciding inventory management and product placements
#4. 

#apartment is our 37th item
apt3<-thirdpass[which(thirdpass[,3]==37),]

apt3_conf<-NULL

#calculate confidence and lift levels
#confidence is conditional: given that you buy peanut butter and jelly, what is the likelihood that you buy bread

#lift is confidence divided by the probability of the target product

#confidence: if you buy pb and j, you are 80% likely to buy bread
#80% is confidence of that rule

#I don't care. because 79% of all people buy bread anyway

#knowing pb and j, has improved your prediction of bread 1%
#lift is 80%/79%, it's the improvement the rule gives

#40% of people buy bread
#conditional on pb and j, 80% buy bread
#lift is 2, 


k<-1
while(k<=nrow(apt3)){

support<-mean(mktdummies[,thirdpass[k,1]]*mktdummies[,thirdpass[k,2]]*mktdummies[,thirdpass[k,3]],na.rm=TRUE)

confidence<-mean(mktdummies[,thirdpass[k,1]]*mktdummies[,thirdpass[k,2]]*mktdummies[,thirdpass[k,3]],na.rm=TRUE)/mean(mktdummies[,thirdpass[k,1]]*mktdummies[,thirdpass[k,2]],na.rm=TRUE)

lift<-confidence/mean(mktdummies[,thirdpass[k,3]],na.rm=TRUE)

apt3_conf<-rbind(apt3_conf,unname(c(apt3[k,],support,confidence,lift)))
k<-k+1
}


lift_thresh<-1.5
conf_thresh<-.6


apt3_high<-apt3_conf[which(apt3_conf[,5]>conf_thresh & apt3_conf[,6]>lift_thresh),]
