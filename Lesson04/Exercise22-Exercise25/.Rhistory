setwd(‘Users/rutujay/Documents/R/Alamo’)
setwd(‘C:\Users\rutujay\Documents\R\R-3.5.1\Alamo.jpg’)
setwd("C:\Users\rutujay\Documents\R\R-3.5.1\Alamo.jpg")
library('imager')
filepath<-'alamo.jpg'
im <- imager::load.image(file =filepath)
im <- imager::load.image(file =filepath)
install.packages('imager')
install.packages("imager")
library('imager')
filepath<-'alamo.jpg'
im <- imager::load.image(file =filepath)
im<-imager::rm.alpha(im)
im<-imager::grayscale(im)
im<-imager::imsplit(im,axis = "x", nb = 10)
matrix <- matrix(nrow = 10, ncol = 10)
for (i in 1:10) {
is <- imager::imsplit(im = im[[i]], axis = "y", nb = 10)
for (j in 1:10) {
matrix[j,i] <- mean(is[[j]])
}
}
print(matrix)
brightnesscomparison<-function(x,y){
compared<-0
if(abs(x/y-1)>0.1){
if(x>y){
compared<-1
}
if(x<y){
compared<-(-1)
}
}
return(compared)
}
i<-5
j<-5
left<-brightnesscomparison(matrix[i,j-1],matrix[i,j])
i<-5
j<-5
top<-brightnesscomparison(matrix[i-1,j],matrix[i,j])
i<-5
j<-5
left<-brightnesscomparison(matrix[i,j-1],matrix[i,j])
i<-5
j<-5
top<-brightnesscomparison(matrix[i-1,j],matrix[i,j])
i<-5
j<-5
top_left<-brightnesscomparison(mat[i-1,j-1],mat[i,j])
bottom_left<-brightnesscomparison(mat[i+1,j-1],mat[i,j])
top_right<-brightnesscomparison(mat[i-1,j+1],mat[i,j])
right<-brightnesscomparison(mat[i,j+1],mat[i,j])
bottom_right<-brightnesscomparison(mat[i+1,j+1],mat[i,j])
bottom<-brightnesscomparison(mat[i+1,j],mat[i,j])
i<-5
j<-5
top_left<-brightnesscomparison(matrix[i-1,j-1],matrix[i,j])
bottom_left<-brightnesscomparison(matrix[i+1,j-1],matrix[i,j])
top_right<-brightnesscomparison(matrix[i-1,j+1],matrix[i,j])
right<-brightnesscomparison(matrix[i,j+1],matrix[i,j])
bottom_right<-brightnesscomparison(matrix[i+1,j+1],matrix[i,j])
bottom<-brightnesscomparison(matrix[i+1,j],matrix[i,j])
i<-5
j<-5
left<-brightnesscomparison(matrix[i,j-1],matrix[i,j])
i<-5
j<-5
top<-brightnesscomparison(matrix[i-1,j],matrix[i,j])
i<-5
> j<-5
> top_left<-brightnesscomparison(matrix[i-1,j-1],matrix[i,j])
> bottom_left<-brightnesscomparison(matrix[i+1,j-1],matrix[i,j])
> top_right<-brightnesscomparison(matrix[i-1,j+1],matrix[i,j])
> right<-brightnesscomparison(matrix[i,j+1],matrix[i,j])
> bottom_right<-brightnesscomparison(matrix[i+1,j+1],matrix[i,j])
> bottom<-brightnesscomparison(matrix[i+1,j],matrix[i,j])
i<-5
j<-5
left<-brightnesscomparison(matrix[i,j-1],matrix[i,j])
i<-5
j<-5
top<-brightnesscomparison(matrix[i-1,j],matrix[i,j])
<-5
j<-5
top_left<-brightnesscomparison(matrix[i-1,j-1], matrix[i,j])
bottom_left<-brightnesscomparison(matrix[i+1,j-1],matrix[i,j])
top_right<-brightnesscomparison(matrix[i-1,j+1],matrix[i,j])
right<-brightnesscomparison(matrix[i,j+1],matrix[i,j])
bottom_right<-brightnesscomparison(matrix[i+1,j+1],matrix[i,j])
bottom<-brightnesscomparison(matrix[i+1,j],matrix[i,j])
i<-5
j<-5
left<-brightnesscomparison(matrix[i,j-1],matrix[i,j])
i<-5
j<-5
top<-brightnesscomparison(matrix[i-1,j],matrix[i,j])
i<-5
j<-5
top_left<-brightnesscomparison(matrix[i-1,j-1], matrix[i,j])
bottom_left<-brightnesscomparison(matrix[i+1,j-1],matrix[i,j])
top_right<-brightnesscomparison(matrix[i-1,j+1],matrix[i,j])
right<-brightnesscomparison(matrix[i,j+1],matrix[i,j])
bottom_right<-brightnesscomparison(matrix[i+1,j+1],matrix[i,j])
bottom<-brightnesscomparison(matrix[i+1,j],matrix[i,j])
comparison<-NULL
neighborcomparison<-function(mat,i,j){
comparison<-NULL
top_left<-0
if(i>1 & j>1){
top_left<-brightnesscomparison(mat[i-1,j-1],mat[i,j])
}
left<-0
if(j>1){
left<-brightnesscomparison(mat[i,j-1],mat[i,j])
}
bottom_left<-0
if(j>1 & i<nrow(mat)){
bottom_left<-brightnesscomparison(mat[i+1,j-1],mat[i,j])
}
top_right<-0
if(i>1 & j<nrow(mat)){
top_right<-brightnesscomparison(mat[i-1,j+1],mat[i,j])
}
right<-0
if(j<ncol(mat)){
right<-brightnesscomparison(mat[i,j+1],mat[i,j])
}
bottom_right<-0
if(i<nrow(mat) & j<ncol(mat)){
bottom_right<-brightnesscomparison(mat[i+1,j+1],mat[i,j])
}
top<-0
if(i>1){
top<-brightnesscomparison(mat[i-1,j],mat[i,j])
}
bottom<-0
if(i<nrow(mat)){
bottom<-brightnesscomparison(mat[i+1,j],mat[i,j])
}
comparison<-c(top_left,left,bottom_left,bottom,bottom_right,right,top_right,top)
return(comparison)
}
signature<-NULL
for (i in 1:nrow(matrix)){
for (j in 1:ncol(matrix)){
signature<-c(signature,neighborcomparison(matrix,i,j))
}
}
get_signature<-function(matrix){
signature<-NULL
for (i in 1:nrow(matrix)){
for (j in 1:ncol(matrix)){
signature<-c(signature,neighborcomparison(matrix,i,j))
}
}
return(signature)
}
building_signature<-get_signature(matrix)
building_signature
filepath<-'borges.jpg'
im <- imager::load.image(file =filepath)
filepath<-'borges.jpg'
im <- imager::load.image(file =filepath)
filepath<-'borges.jpg'
im <- imager::load.image(file =filepath)
im<-imager::rm.alpha(im)
im<-imager::grayscale(im)
im<-imager::imsplit(im,axis = "x", nb = 10)
matrix <- matrix(nrow = 10, ncol = 10)
for (i in 1:10) {
is <- imager::imsplit(im = im[[i]], axis = "y", nb = 10)
for (j in 1:10) {
matrix[j,i] <- mean(is[[j]])
}
}
borges_signature<-get_signature(matrix)
borges_signature
filepath<-'borges.jpg'
im <- imager::load.image(file =filepath)
im<-imager::rm.alpha(im)
im<-imager::grayscale(im)
im<-imager::imsplit(im,axis = "x", nb = 9)
matrix <- matrix(nrow = 9, ncol = 9)
for (i in 1:9) {
is <- imager::imsplit(im = im[[i]], axis = "y", nb = 9)
for (j in 1:9) {
matrix[j,i] <- mean(is[[j]])
}
}
borges_signature_ninebynine<-get_signature(matrix)
borges_signature_ninebynine
comparison<-mean(abs(borges_signature-building_signature))
\]
filepath<-'alamo_marked.jpg'
im <- imager::load.image(file =filepath)
filepath<-'alamo_marked.jpg'
im <- imager::load.image(file =filepath)
im<-imager::rm.alpha(im)
im<-imager::grayscale(im)
im<-imager::imsplit(im,axis = "x", nb = 10)
matrix <- matrix(nrow = 10, ncol = 10)
matrix
matrix
filepath<-'alamo_marked.jpg'
im <- imager::load.image(file =filepath)
im<-imager::rm.alpha(im)
im<-imager::grayscale(im)
im<-imager::imsplit(im,axis = "x", nb = 10)
matrix <- matrix(nrow = 10, ncol = 10)
for (i in 1:10) {
is <- imager::imsplit(im = im[[i]], axis = "y", nb = 10)
for (j in 1:10) {
matrix[j,i] <- mean(is[[j]])
}
}
watermarked_signature<-get_signature(matrix)
watermarked_signature
mean(abs(watermarked_signature-building_signature))
comparison<-mean(abs(watermarked_signature-building_signature))
comparison
install.packages('psych')
install.packages('GPArotation')
install.packages('qgraph')
library(psych)
library(GPArotation)
library(qgraph)
data(big5)
print(head(big5))
print(nrow(big5))
print(ncol(big5))
print(range(big5))
big_cor <- cor(big5)
olution <- fa(r = big_cor, nfactors = 5, rotate = "oblimin", fm = "pa")
solution <- fa(r = big_cor, nfactors = 5, rotate = "oblimin", fm = "pa")
print(solution)
print(solution$weights)
solution <- fa(r = big_cor, nfactors = 5, rotate = "oblimin", fm = "pa")
solution <- fa(r = big_cor, nfactors = 3, rotate = "varimax", fm = "minres")
print(solution)
parallel <- fa.parallel(big5, fm = 'minres', fa = 'fa')
factor<-read.csv('factor.csv')
library(psych)
ratings<-factor[,2:11]
ratings_cor<-cor(ratings)
parallel <- fa.parallel(ratings_cor, fm = 'minres', fa = 'fa')
factor_analysis<-fa(ratings_cor, nfactors=1)
print(factor_analysis)
mkt<-read.csv(filepath,stringsAsFactors=FALSE,header=FALSE,sep=',')
setwd("~/R/R-3.5.1/Lesson04/Exercise22-Exercise25")
head(mkt)
filepath='census.csv'
mkt<-read.csv(filepath,stringsAsFactors=FALSE,header=FALSE,sep=',')
head(mkt)
mkt$old<-1*(mkt$V1>median(mkt$V1))
mkt$young<-1*(mkt$V1<=median(mkt$V1))
mkt$government_employee<-1*(mkt$V2 %in% c(" State-gov"," Local-gov","
Federal-gov"))
mkt$self_employed<-1*(mkt$V2 %in% c(" Self-emp-not-inc"," Self-empinc"))
mkt$never_worked<-1*(mkt$V2 %in% c(" Never-worked"))
mkt$private_employment<-1*(mkt$V2 %in% c(" Private"))
mkt$other_employment<-1*(mkt$V2 %in% c(" ?"," Without-pay" ))
mkt$government_employee<-1*(mkt$V2 %in% c(" State-gov"," Local-gov","Federal-gov"))
mkt$self_employed<-1*(mkt$V2 %in% c(" Self-emp-not-inc"," Self-empinc"))
mkt$never_worked<-1*(mkt$V2 %in% c(" Never-worked"))
mkt$private_employment<-1*(mkt$V2 %in% c(" Private"))
mkt$other_employment<-1*(mkt$V2 %in% c(" ?"," Without-pay" ))
mkt$high_school_incomplete<-1*(mkt$V4 %in% c(" 1st-4th"," Preschool","5th-6th"," 7th-8th"," 9th"," 10th"," 11th"," 12th"))
mkt$high_school_complete<-1*(mkt$V4 %in% c(" HS-grad"," Some-college","Assoc-acdm"," Assoc-voc"))
mkt$bachelors<-1*(mkt$V4 %in% c(" Bachelors"))
mkt$post_bachelors<-1*(mkt$V4 %in% c(" HS-grad", " Masters"," Profschool","Doctorate" ))
mkt$married<-1*(mkt$V6 %in% c(" Married-civ-spouse"," Married-AFspouse","Married-spouse-absent"))
mkt$never_married<-1*(mkt$V6 %in% c(" Never-married"))
mkt$divorced_separated<-1*(mkt$V6 %in% c(" Divorced"," Separated"))
mkt$widowed<-1*(mkt$V6 %in% c( " Widowed"))
mkt$clerical<-1*(mkt$V7 %in% c(" Adm-clerical"))
mkt$managerial<-1*(mkt$V7 %in% c(" Exec-managerial"))
mkt$moving<-1*(mkt$V7 %in% c(" Transport-moving"))
mkt$farming_fishing<-1*(mkt$V7 %in% c(" Farming-fishing"))
mkt$craft_repair<-1*(mkt$V7 %in% c(" Craft-repair" ))
mkt$sales<-1*(mkt$V7 %in% c(" Sales"))
mkt$tech_support<-1*(mkt$V7 %in% c(" Tech-support"))
mkt$service<-1*(mkt$V7 %in% c(" Protective-serv"," Priv-house-serv", "Other-service"))
mkt$armed_forces<-1*(mkt$V7 %in% c(" Armed-Forces"))
mkt$other_employment<-1*(mkt$V7 %in% c(" Handlers-cleaners"," ?","Machine-op-inspct"," Prof-specialty"))
mkt$male<-1*(mkt$V10 %in% c(" Male"))
mkt$female<-1*(mkt$V10 %in% c(" Female"))
mkt$high_hours<-1*(mkt$V12 > median(mkt$V13))
mkt$low_hours<-1*(mkt$V12 <= median(mkt$V13))
mkt$usa<-1*(mkt$V13==" United-States")
mkt$not_usa<-1*(mkt$V13!=" United-States")
mkt$low_income<-1*(mkt$V14==" <=50K")
mkt$high_income<-1*(mkt$V14==" >50K")
mktdummies<-mkt[,16:ncol(mkt)]
print(colMeans(mktdummies,na.rm=TRUE))
support_thresh<-0.1
firstpass<-unname(which(colMeans(mktdummies,na.rm=TRUE)>support_thresh))
secondcand<-t(combn(firstpass,2))
secondpass<-NULL
k<-4
support<-mean(mktdummies[,secondcand[k,1]]*mktdummies[,secondcand[k,2]]
,na.rm=TRUE)
print(support)
while(k<=nrow(secondcand)){
support<-mean(mktdummies[,secondcand[k,1]]*mktdummies[,secondcand[k,2]]
,na.rm=TRUE)
if(support>support_thresh){
secondpass<-rbind(secondpass,secondcand[k,])
}
k<-k+1
}
print(head(secondpass))
product<-1
n<-1
while(n<=ncol(secondpass)){
product<-product*mktdummies[,secondpass[k,n]]
n<-n+1
}
while(k<=nrow(secondpass)){
j<-1
while(j<=length(firstpass)){
n<-1
product<-1
while(n<=ncol(secondpass)){
product<-product*mktdummies[,secondpass[k,n]]
n<-n+1
}
thirdpass<-NULL
k<-1
while(k<=nrow(secondpass)){
j<-1
while(j<=length(firstpass)){
n<-1
product<-1
while(n<=ncol(secondpass)){
product<-product*mktdummies[,secondpass[k,n]]
n<-n+1
}
if(!(firstpass[j] %in% secondpass[k,])){
product<-product*mktdummies[,firstpass[j]]
thirdpass<-NULL
k<-1
while(k<=nrow(secondpass)){
j<-1
while(j<=length(firstpass)){
n<-1
product<-1
while(n<=ncol(secondpass)){
product<-product*mktdummies[,secondpass[k,n]]
n<-n+1
}
if(!(firstpass[j] %in% secondpass[k,])){
product<-product*mktdummies[,firstpass[j]]
support<-mean(product,na.rm=TRUE)
if(support>support_thresh){
thirdpass<-rbind(thirdpass,c(secondpass[k,],firstpass[j]))
}
}
j<-j+1
}
k<-k+1
}
fourthpass<-NULL
k<-1
while(k<=nrow(thirdpass)){
j<-1
while(j<=length(firstpass)){
n<-1
product<-1
while(n<=ncol(thirdpass)){
product<-product*mktdummies[,thirdpass[k,n]]
n<-n+1
}
if(!(firstpass[j] %in% thirdpass[k,])){
product<-product*mktdummies[,firstpass[j]]
support<-mean(product,na.rm=TRUE)
if(support>support_thresh){
fourthpass<-rbind(fourthpass,c(thirdpass[k,],firstpass[j]))
}
}
j<-j+1
}
k<-k+1
}
print(head(thirdpass))
#Exercise22
filepath='census.csv'
mkt<-read.csv(filepath,stringsAsFactors=FALSE,header=FALSE,sep=',')
head(mkt)
mkt$old<-1*(mkt$V1>median(mkt$V1))
mkt$young<-1*(mkt$V1<=median(mkt$V1))
mkt$government_employee<-1*(mkt$V2 %in% c(" State-gov"," Local-gov","Federal-gov"))
mkt$self_employed<-1*(mkt$V2 %in% c(" Self-emp-not-inc"," Self-empinc"))
mkt$never_worked<-1*(mkt$V2 %in% c(" Never-worked"))
mkt$private_employment<-1*(mkt$V2 %in% c(" Private"))
mkt$other_employment<-1*(mkt$V2 %in% c(" ?"," Without-pay" ))
mkt$high_school_incomplete<-1*(mkt$V4 %in% c(" 1st-4th"," Preschool","5th-6th"," 7th-8th"," 9th"," 10th"," 11th"," 12th"))
mkt$high_school_complete<-1*(mkt$V4 %in% c(" HS-grad"," Some-college","Assoc-acdm"," Assoc-voc"))
mkt$bachelors<-1*(mkt$V4 %in% c(" Bachelors"))
mkt$post_bachelors<-1*(mkt$V4 %in% c(" HS-grad", " Masters"," Profschool","Doctorate" ))
mkt$married<-1*(mkt$V6 %in% c(" Married-civ-spouse"," Married-AFspouse","Married-spouse-absent"))
mkt$never_married<-1*(mkt$V6 %in% c(" Never-married"))
mkt$divorced_separated<-1*(mkt$V6 %in% c(" Divorced"," Separated"))
mkt$widowed<-1*(mkt$V6 %in% c( " Widowed"))
mkt$clerical<-1*(mkt$V7 %in% c(" Adm-clerical"))
mkt$managerial<-1*(mkt$V7 %in% c(" Exec-managerial"))
mkt$moving<-1*(mkt$V7 %in% c(" Transport-moving"))
mkt$farming_fishing<-1*(mkt$V7 %in% c(" Farming-fishing"))
mkt$craft_repair<-1*(mkt$V7 %in% c(" Craft-repair" ))
mkt$sales<-1*(mkt$V7 %in% c(" Sales"))
mkt$tech_support<-1*(mkt$V7 %in% c(" Tech-support"))
mkt$service<-1*(mkt$V7 %in% c(" Protective-serv"," Priv-house-serv", "Other-service"))
mkt$armed_forces<-1*(mkt$V7 %in% c(" Armed-Forces"))
mkt$other_employment<-1*(mkt$V7 %in% c(" Handlers-cleaners"," ?","Machine-op-inspct"," Prof-specialty"))
mkt$male<-1*(mkt$V10 %in% c(" Male"))
mkt$female<-1*(mkt$V10 %in% c(" Female"))
mkt$high_hours<-1*(mkt$V12 > median(mkt$V13))
mkt$low_hours<-1*(mkt$V12 <= median(mkt$V13))
mkt$usa<-1*(mkt$V13==" United-States")
mkt$not_usa<-1*(mkt$V13!=" United-States")
mkt$low_income<-1*(mkt$V14==" <=50K")
mkt$high_income<-1*(mkt$V14==" >50K")
mktdummies<-mkt[,16:ncol(mkt)]
print(colMeans(mktdummies,na.rm=TRUE))
#Exercise23
support_thresh<-0.1
firstpass<-unname(which(colMeans(mktdummies,na.rm=TRUE)>support_thresh))
secondcand<-t(combn(firstpass,2))
secondpass<-NULL
k<-4
support<-mean(mktdummies[,secondcand[k,1]]*mktdummies[,secondcand[k,2]],na.rm=TRUE)
print(support)
k<-1
while(k<=nrow(secondcand)){
support<-mean(mktdummies[,secondcand[k,1]]*mktdummies[,secondcand[k,2]]
,na.rm=TRUE)
if(support>support_thresh){
secondpass<-rbind(secondpass,secondcand[k,])
}
k<-k+1
}
print(head(secondpass))
#Exercise24
product<-1
n<-1
thirdpass<-NULL
k<-1
while(k<=nrow(secondpass)){
j<-1
while(j<=length(firstpass)){
n<-1
product<-1
while(n<=ncol(secondpass)){
product<-product*mktdummies[,secondpass[k,n]]
n<-n+1
}
if(!(firstpass[j] %in% secondpass[k,])){
product<-product*mktdummies[,firstpass[j]]
support<-mean(product,na.rm=TRUE)
if(support>support_thresh){
thirdpass<-rbind(thirdpass,c(secondpass[k,],firstpass[j]))
}
}
j<-j+1
}
k<-k+1
}
fourthpass<-NULL
k<-1
while(k<=nrow(thirdpass)){
j<-1
while(j<=length(firstpass)){
n<-1
product<-1
while(n<=ncol(thirdpass)){
product<-product*mktdummies[,thirdpass[k,n]]
n<-n+1
}
if(!(firstpass[j] %in% thirdpass[k,])){
product<-product*mktdummies[,firstpass[j]]
support<-mean(product,na.rm=TRUE)
if(support>support_thresh){
fourthpass<-rbind(fourthpass,c(thirdpass[k,],firstpass[j]))
}
}
j<-j+1
}
k<-k+1
}
#Exercise25
fourthpass<-NULL
k<-1
while(k<=nrow(thirdpass)){
j<-1
while(j<=length(firstpass)){
n<-1
product<-1
while(n<=ncol(thirdpass)){
product<-product*mktdummies[,thirdpass[k,n]]
n<-n+1
}
if(!(firstpass[j] %in% thirdpass[k,])){
product<-product*mktdummies[,firstpass[j]]
support<-mean(product,na.rm=TRUE)
if(support>support_thresh){
fourthpass<-rbind(fourthpass,c(thirdpass[k,],firstpass[j]))
}
}
j<-j+1
}
k<-k+1
}
